
services:
  postgres:
    image: postgres:15-alpine
    container_name: mentorship-postgres-prod
    restart: unless-stopped
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mentorship-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
    networks:
      - mentorship-network
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: /api
    container_name: mentorship-frontend-prod
    restart: unless-stopped
    networks:
      - mentorship-network
    depends_on:
      - backend

  nginx:
    image: nginx:alpine
    container_name: mentorship-nginx-prod
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - mentorship-network
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
    driver: local

networks:
  mentorship-network:
    driver: bridge
